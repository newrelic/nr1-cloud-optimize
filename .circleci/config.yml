# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

# Gotchas:
# - The master branch has to have a config or it won't see other branches config files
# - CircleCI requires a follower before it will build a project
# - Have you enabled 3rd party orbs from Organization -> Settings -> Security -> Orb Security Settings ?


# Testing
# There is a CLI for testing config schema locally - https://circleci.com/docs/2.0/local-cli/#section=configuration
# Run `circleci config validate` from the project folder


# 2.1 vs. 2.0 - https://discuss.circleci.com/t/circleci-2-1-config-overview/26057
# 
# Spec now includes:
#   orbs
#   commands
#   executors
#   jobs

# Version 2.1 moves towards a single version at the top of the file vs. under workflow
version: 2.1

# 
# Configs
# 

# The private ENV variable in CircleCI where we've stored the API key for deployment
nr1-profile-env-name: &nr1-profile-env-name
  NR1CLI_PROFILE_DEMOTRONV2

# The Nerdpack UUID we should deploy with
# Currently set to one associated with DemotronV2
nr1-nerdpack-uuid: &nr1-nerdpack-uuid
  e30b3b37-db06-439a-b030-cd5bcf7ee323

# Channel we deploy to on pushes to master
nr1-deploy-channel: &nr1-deploy-channel
  BETA

# Channel we subscribe to on pushes to master
nr1-subscribe-channel: &nr1-subscribe-channel
  BETA

# Semantic release configs
github-semantic-bot: &github-semantic-bot
  GIT_AUTHOR_NAME: "@semantic-release-bot"
  GIT_AUTHOR_EMAIL: "opensource+nr1-cloud-optimize@newrelic.com"
  GIT_COMMITTER_NAME: "@semantic-release-bot"
  GIT_COMMITTER_EMAIL: "opensource+nr1-cloud-optimize@newrelic.com"

# Third Party generation configs
third-party-bot: &third-party-bot
  THIRD_PARTY_GIT_AUTHOR_NAME: "devfreddy"
  THIRD_PARTY_GIT_AUTHOR_EMAIL: "mfrederick@newrelic.com"

# Fingerprint for a Github repository write access deploy key
# Required for
  # - commiting the incremented package.json version back to the repository
  # - auto-generated change logs from semantic-release
deploy-key-fingerprint: &deploy-key-fingerprint
  d4:99:76:61:88:71:2f:86:16:b6:84:2a:69:43:55:dc

# Source code caching
source-cache-key: &source-cache-key
  source-v2-{{ .Branch }}-{{ .Revision }}

source-cache-keys: &source-cache-keys
  - *source-cache-key

# Node module caching
npm-cache-key: &npm-cache-key
  v1-dependencies-{{ checksum "package-lock.json" }}

npm-backup-cache-key: &npm-backup-cache-key
  v1-dependencies

npm-cache-keys: &npm-cache-keys
  - *npm-cache-key
  - *npm-backup-cache-key

# 
# Orbs
# 
orbs:
  snyk: snyk/snyk@0.0.8


#
# Executors
#

executor_defaults: &executor_defaults
  environment:
    - GIT_COMMIT_DESC: git log --format=oneline -n 1 $CIRCLE_SHA1

# Node Images - https://circleci.com/docs/2.0/circleci-images/#nodejs
# Variants - https://circleci.com/docs/2.0/circleci-images/#language-image-variants
executors:
  node10:
    <<: *executor_defaults
    docker:
      - image: circleci/node:10

  node10browsers:
    <<: *executor_defaults
    docker:
      - image: circleci/node:10-browsers

# 
# Commands
# 
commands: 
  # Download and cache source code
  command-checkout-source:
    steps:
      - checkout

      # Temporary workaround for https://discuss.circleci.com/t/22437
      - run:
          name: "Create local tag"
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
              mkdir -p ~/.ssh
              echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
              git fetch --force origin "refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
            fi

      - save_cache:
          key: *source-cache-key
          paths:
            - .

      - run:
          name: "package.json version"
          command: |
            node -p "require('./package.json').version"

  command-restore-source:
    steps:
      - restore_cache:
          keys:
            *source-cache-keys

  # Download and cache npm dependencies
  command-npm-install:
    steps:
      - run: npm install

      - save_cache:
          key: *npm-cache-key
          paths:
            - node_modules
  
  # Run separately from command-npm-install because we don't want to run this on pull requests. It requires a Snyk API token which is privately stored in ENV variables
  # To expose we would have to open up _all_ env variables by turning on "Pass secrets to builds from forked pull requests" which we do NOT want to do
  # Snyk is installed in our Github org and will scan the pull requests via that method
  command-snyk-scan:
    steps:
      - snyk/scan

  command-restore-npm:
    steps:
      - restore_cache:
          keys:
            *npm-cache-keys

  command-setup-ci-keys:
    steps:
      - add_ssh_keys:
          fingerprints:
            - *deploy-key-fingerprint

  command-install-json-cli:
    steps:
      - run:
          name: "Install json cli tool"
          command: |
            sudo npm install -g json

  # TO DO - Cache or add to base docker image pre-installed
  command-install-nr1-cli:
    steps:
      - run:
          name: "Install NR1 CLI"
          command: |
            if ! type "nr1" > /dev/null; then
              curl -s https://cli.nr-ext.net/installer.sh | sudo bash
            fi

  command-install-oss-cli:
    steps:
      - run:
          name: "Install OSS CLI"
          command: |
            sudo npm install -g @newrelic/newrelic-oss-cli
            
  # TO DO - Replace command-validate-nerdpack-schema and command-validate-opensource-files with the oss-cli
  # This will allow us to make changes at-will vs. updating dozens of config.yml's
  command-validate-nerdpack-schema:
    steps:
      - run:
          name: "Validating Nerdpack"
          command: |
            nr1 nerdpack:validate

  command-validate-opensource-files:
    steps:
      - run:
          name: "Checking for OSS files"
          command: |
            rootDir=./

            declare -a files=(
              "README.md"
              ".prettierrc.js"
              ".eslintrc.js"
              ".gitignore"
              ".circleci/config.yml"
              "package.json"

              "LICENSE"
              "THIRD_PARTY_NOTICES.md"
              "CODE_OF_CONDUCT.md"
              "cla.md"
              ".github/ISSUE_TEMPLATE/bug_report.md"
              ".github/ISSUE_TEMPLATE/enhancement.md"
            )

            for FILE in "${files[@]}"
            do
              if [ ! -f "${rootDir}$FILE" ]; then
                printf "\n"
                echo "Error: $FILE is missing from Nerdpack"
                printf "\n"
                exit 1
              else
                echo "Found "${rootDir}$FILE
              fi
            done
  
  command-deploy:
    steps:
      - run:
          name: "Adding nr1 profile api key"
          command: |
            NR1_PROFILE_KEY=${!NR1_PROFILE_ENV_NAME}
            nr1 profiles:add --name default-deploy-target --api-key ${NR1_PROFILE_KEY} --region us
          environment:
            NR1_PROFILE_ENV_NAME: *nr1-profile-env-name

      - run:
          name: "Setting target UUID"
          command: |
            json -I -f package.json -e "this.nr1.uuid='${NR1_NERDPACK_UUID}'"

      - run:
          name: "Build"
          command: |
            nr1 nerdpack:build

      - run:
          name: "Publish"
          command: |
            nr1 nerdpack:publish

      - run:
          name: "Deploy"
          command: |
            nr1 nerdpack:deploy --channel=${NR1_DEPLOY_CHANNEL}
          environment:
            NR1_DEPLOY_CHANNEL: *nr1-deploy-channel

      - run:
          name: "Subscribe"
          command: |
            nr1 nerdpack:subscribe --channel=${NR1_SUBSCRIBE_CHANNEL}
          environment:
            NR1_SUBSCRIBE_CHANNEL: *nr1-subscribe-channel

# 
# Jobs
# 
jobs:
  job-checkout-and-build:    
    executor: node10browsers

    steps:
      - command-checkout-source
      - command-npm-install
      - command-install-nr1-cli

      # Test and fail early if the above isn't enough to build the app
      - run:
          name: "nr1 nerdpack build"
          command: |
            nr1 nerdpack:build

  job-validate-nerdpack:
    executor: node10browsers

    steps:
      - command-restore-source
      - command-install-nr1-cli
      - command-validate-nerdpack-schema
      - command-validate-opensource-files
  
  # Requires project to be setup and configured with eslint-plugin-newrelic
  job-lint:
    executor: node10browsers

    steps:
      - command-restore-source
      - command-restore-npm
      - run:
          name: "ESLinting"
          command: |
            npm run eslint-check

  job-test-pr:
    executor: node10browsers

    steps:
      - command-restore-source
      - command-restore-npm
      # We don't have tests yet, but we should
      - run:
          name: "Additional checks on pr from fork"
          command: |
            echo 'Validating nothing is awry, maybe we look for changes to package.json or .circle/config.yml'

  job-test-code:
    executor: node10browsers

    steps:
      - command-restore-source
      - command-restore-npm
      # We don't have tests yet, but we should
      - run: npm test
  
  # TO DO - utilize our future oss-cli or a script to callout to github to generate a release utilizing the version in package.json
  job-generate-release:
    executor: node10browsers

    environment:
      <<: *github-semantic-bot

    steps:
      - command-restore-source

      # Necessary so github.com is a known host for when semantic-release interacts with git
      # TO DO - Replace with a smaller slice of the checkout command
      - command-checkout-source
      - command-restore-npm

      # Double-check dependencies with snyk before we release and deploy
      - command-snyk-scan

      - command-setup-ci-keys

      # https://semantic-release.gitbook.io/semantic-release/usage/plugins
      # See .releaserc and the corresponding plugins configuration for details
      - run:
          name: Semantic Release
          command: |
            npx semantic-release

  job-generate-third-party-notices:
    executor: node10browsers

    environment:
      <<: *third-party-bot

    steps:
      - command-restore-source

      # Necessary so github.com is a known host
      # TO DO - Replace with a smaller slice of the checkout command or cache .ssh folder
      - command-checkout-source

      - command-restore-npm
      - command-install-oss-cli
      
      - add_ssh_keys:
          fingerprints:
            - *deploy-key-fingerprint

      - run:
          name: Generate Third Party Notices
          command: |
            # latest commit
            LATEST_COMMIT=$(git rev-parse HEAD)

            # latest commit where package.json was changed
            LAST_CHANGED_COMMIT=$(git log -1 --format=format:%H --full-diff package.json)

            if [ $LAST_CHANGED_COMMIT = $LATEST_COMMIT ]; then
              git config user.email "${THIRD_PARTY_GIT_AUTHOR_EMAIL}"
              git config user.name "${THIRD_PARTY_GIT_AUTHOR_NAME}"

              oss third-party manifest
              oss third-party notices

              git add third_party_manifest.json
              git add THIRD_PARTY_NOTICES.md

              # Removed [skip ci] because we need to re-trigger the release workflow for semantic-release which exits early when we check-in this file
              # The local branch master is behind the remote one, therefore a new version won't be published
              # https://github.com/semantic-release/semantic-release/issues/1208
              git commit -m 'chore: update third-party manifest and notices'
              git push origin ${CIRCLE_BRANCH}

            else
              echo "No change in package.json, not regenerating third-party notices"
            fi

  job-deploy:
    executor: node10browsers

    environment:
      NR1_NERDPACK_UUID: *nr1-nerdpack-uuid

    steps:
      - command-restore-source
      - command-restore-npm
      - command-install-json-cli
      - command-install-nr1-cli
      - command-deploy

workflows:
  # A merge or commit to the master branch
  release:
    jobs:
      - job-checkout-and-build:
          filters:
            branches:
              only:
                - master

      - job-generate-third-party-notices:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              only:
                - master

      - job-generate-release:
          requires:
            - job-checkout-and-build
            - job-generate-third-party-notices

          filters:
            branches:
              only:
                - master

  # Deploy on tag creation
  deploy-to:
    jobs:
      - job-checkout-and-build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

      - job-deploy:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/

  # Test and Analyze a branch (other than master)
  # Our Advanced Settings of "Only build pull requests" will limit this to branches with open pull requests
  analyze:
    jobs:
      - job-checkout-and-build:
          filters:
            branches:
              ignore:
                - master
      
      - job-lint:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              ignore:
                - master

      # All contributions, even those by maintainers should follow the pr's from forks workflow
      # CircleCI sets the name of pull requests originating from forks to /pull/{id}
      - job-test-pr:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              only: /pull\/[0-9]+/

      - job-test-code:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              ignore:
                - master

      # Validate schema of the Nerdpack
      - job-validate-nerdpack:
          requires:
            - job-checkout-and-build

          filters:
            branches:
              ignore:
                - master
